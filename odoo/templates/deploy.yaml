apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-odoo
  labels:
    app: odoo
spec:
  selector:
    matchLabels:
      app: odoo
  template:
    metadata:
      labels:
        app: odoo
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/cm.yaml") . | sha256sum }}
    spec:
      initContainers:
        - name: init
          image: {{ .Values.image }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          command:
            - /bin/bash
            - -c
            - |
              {{- if .Values.downloadOdooEnterprise }}/entrypoint.sh download-git-archive && \{{- end }}
              /entrypoint.sh clone-git-addons && \
              /entrypoint.sh init-db
          envFrom:
            - secretRef:
                name: {{ .Values.secretRef }}
            - configMapRef:
                name: {{ .Release.Name }}-configmap
          env:
            {{- if .Values.cnpg.enabled }}
            - name: PGHOST
              value: {{ .Release.Name }}-postgresql-rw.{{ .Release.Namespace }}.svc.cluster.local
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql-app
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql-app
                  key: password
            {{- end }}
            {{- if .Values.postgresql.enabled }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.auth.existingSecret }}
                  key: {{ .Values.postgresql.auth.secretKeys.userPasswordKey }}
            - name: PGHOST
              value: odoo-postgresql.{{ .Release.Namespace }}.svc.cluster.local
            - name: PGUSER
              value: {{ .Values.postgresql.auth.username }}
            {{- end }}
            {{- if .Values.postgres.enabled }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secretRef }}
                  key: {{ .Values.postgres.userPasswordKey }}
            - name: PGHOST
              value: postgres.{{ .Release.Namespace }}.svc.cluster.local
            - name: PGUSER
              value: {{ .Values.postgres.user }}
            {{- end }}
            {{- if .Values.vshnPostgres.enabled }}
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.vshnPostgres.secretRef }}
                  key: POSTGRESQL_HOST
            - name: PGPORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.vshnPostgres.secretRef }}
                  key: POSTGRESQL_PORT
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.vshnPostgres.secretRef }}
                  key: POSTGRESQL_USER
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.vshnPostgres.secretRef }}
                  key: POSTGRESQL_PASSWORD
            - name: PGSSLMODE
              value: verify-ca
            - name: PGSSLROOTCERT
              value: "/mnt/{{ .Values.vshnPostgres.secretRef }}/ca.crt"
            {{- end }}
          volumeMounts:
            - mountPath: /var/lib/odoo/
              name: odoo
              subPath: odoodata
            {{- if .Values.vshnPostgres.enabled }}
            - name: {{ .Values.vshnPostgres.secretRef }}
              readOnly: true
              mountPath: "/mnt/{{ .Values.vshnPostgres.secretRef }}"
            {{- end }}
      containers:
        - name: odoo
          image: {{ .Values.image }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          ports:
          - containerPort: 8069
          livenessProbe:
            httpGet:
              path: /web/health
              port: 8069
            initialDelaySeconds: 60
            periodSeconds: 10
          envFrom:
            - secretRef:
                name: {{ .Values.secretRef }}
            - configMapRef:
                name: {{ .Release.Name }}-configmap
          env:
            {{- if .Values.cnpg.enabled }}
            - name: PGHOST
              value: {{ .Release.Name }}-postgresql-rw.{{ .Release.Namespace }}.svc.cluster.local
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql-app
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql-app
                  key: password
            {{- end }}
            {{- if .Values.postgresql.enabled }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.auth.existingSecret }}
                  key: {{ .Values.postgresql.auth.secretKeys.userPasswordKey }}
            - name: PGHOST
              value: odoo-postgresql.{{ .Release.Namespace }}.svc.cluster.local
            - name: PGUSER
              value: {{ .Values.postgresql.auth.username }}
            {{- end }}
            {{- if .Values.postgres.enabled }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.secretRef }}
                  key: {{ .Values.postgres.userPasswordKey }}
            - name: PGHOST
              value: postgres.{{ .Release.Namespace }}.svc.cluster.local
            - name: PGUSER
              value: {{ .Values.postgres.user }}
            {{- end }}
            {{- if .Values.vshnPostgres.enabled }}
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.vshnPostgres.secretRef }}
                  key: POSTGRESQL_HOST
            - name: PGPORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.vshnPostgres.secretRef }}
                  key: POSTGRESQL_PORT
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.vshnPostgres.secretRef }}
                  key: POSTGRESQL_USER
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.vshnPostgres.secretRef }}
                  key: POSTGRESQL_PASSWORD
            - name: PGSSLMODE
              value: verify-ca
            - name: PGSSLROOTCERT
              value: "/mnt/{{ .Values.vshnPostgres.secretRef }}/ca.crt"
            {{- end }}
          volumeMounts:
            - mountPath: /var/lib/odoo/
              name: odoo
              subPath: odoodata
            {{- if .Values.vshnPostgres.enabled }}
            - name: {{ .Values.vshnPostgres.secretRef }}
              readOnly: true
              mountPath: "/mnt/{{ .Values.vshnPostgres.secretRef }}"
            {{- end }}
      volumes:
        - name: odoo
          persistentVolumeClaim:
            claimName: data-odoo
        {{- if .Values.vshnPostgres.enabled }}
        - name: {{ .Values.vshnPostgres.secretRef }}
          secret:
            secretName: {{ .Values.vshnPostgres.secretRef }}
        {{- end }}
